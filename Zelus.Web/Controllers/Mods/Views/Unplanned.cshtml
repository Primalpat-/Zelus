
@using Newtonsoft.Json
@model Zelus.Web.Controllers.Mods.Models.ModPlannerVM

<style type="text/css">
    .set-filter {
    }

    .set-img {
        height: 35px;
        margin: 0 10px;
    }

    .primary-filter {
        width: 100%;
    }

    .square-container {
        align-content: center;
    }

    .selected-mod {
        background-color: lightskyblue;
    }
    .btn-remove {
        padding: 1px 10px;
    }
    .invisible {
        display: none;
    }
</style>

<link href="~/Content/mods.css" rel="stylesheet" />

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h2>Unplanned Mods</h2>
            <small class="text-muted">Last swgoh.gg sync was <abbr data-bind="text: LastSyncHumanized(), attr: { title: LastSyncDateTime() }"></abbr></small>
        </div>
        <div class="col text-right">
            <a href="@Url.Action("Planned", "Mods", new {Area = "", id = Model.PlayerId})" class="btn btn-primary">
                <i class="fas fa-arrow-to-right"></i>
                Planned Modsets
            </a>
        </div>
        <hr />
    </div>

    <div class="row" style="padding-top: 10px;">
        <div class="col">
            <h4>Actions:</h4>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-2">
            <a href="@Url.Action("DeleteAllMods", "Mods", new {Area = "", id = Model.PlayerId})" class="btn btn-outline-danger">
                <i class="fas fa-minus-octagon"></i>
                Clear Mods
            </a>
        </div>
        <div class="col-sm-2">
            <a href="@Url.Action("DeleteAllModSets", "Mods", new {Area = "", id = Model.PlayerId})" class="btn btn-outline-danger">
                <i class="fas fa-minus-circle"></i>
                Clear Modsets
            </a>
        </div>
        <div class="col-sm-2">
            <a class="btn btn-outline-primary" href="#" data-bind="click: saveModset">
                <i class="fas fa-save"></i>
                Save As Modset
            </a>
        </div>
    </div>

    <div class="row" style="padding-top: 10px;">
        <div class="col">
            <h4>Filters:</h4>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="btn-group" data-bind="foreach: availableSets">
                <label class="btn btn-secondary" data-bind="css: { active: $parent.selectedSets.indexOf(id) > -1 }">
                    <input type="checkbox" style="display: none;" value="" autocomplete="off" data-bind="attr: { value: id }, checked: $parent.selectedSets">
                    <img class="set-img" data-bind="attr: { src: imgUrl, alt: name }" />
                </label>
            </div>
        </div>
        <div class="col">
            <div class="form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="checkbox" value="" data-bind="checked: includeModsets">
                    Include all "planned" mods
                </label>
            </div>
        </div>
    </div>

    <div class="row" style="padding-top: 10px;">
        <div class="col">
            <h4>Sorts:</h4>
        </div>
    </div>
    
    <div data-bind="foreach: selectedSorts">
        <div class="row" style="padding-bottom: 10px;">
            <div class="col">
                <div class="input-group">
                    <select data-bind="options: $root.availableSorts, optionsText: 'name', value: stat"></select>&nbsp;
                    <button class="btn btn-sm btn-dark btn-remove" data-bind="click: $root.removeSort"><i class="fas fa-times"></i></button>
                </div>
            </div>
        </div>    
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-sm btn-dark" data-bind="click: addSort"><i class="fas fa-plus"></i> Add Sort</button>
        </div>
    </div>

    <div class="row" style="padding-top: 15px;">
        <div class="col-md">
            <select class="primary-filter" multiple size="3"
                    data-bind="options: availableSquareFilters, optionsText: 'name', optionsValue: 'id', selectedOptions: selectedSquareFilters">
            </select>
        </div>
        <div class="col-md">
            <select class="primary-filter" multiple size="3"
                    data-bind="options: availableArrowFilters, optionsText: 'name', optionsValue: 'id', selectedOptions: selectedArrowFilters">
            </select>
        </div>
        <div class="col-md">
            <select class="primary-filter" multiple size="3"
                    data-bind="options: availableDiamondFilters, optionsText: 'name', optionsValue: 'id', selectedOptions: selectedDiamondFilters">
            </select>
        </div>
        <div class="col-md">
            <select class="primary-filter" multiple size="3"
                    data-bind="options: availableTriangleFilters, optionsText: 'name', optionsValue: 'id', selectedOptions: selectedTriangleFilters">
            </select>
        </div>
        <div class="col-md">
            <select class="primary-filter" multiple size="3"
                    data-bind="options: availableCircleFilters, optionsText: 'name', optionsValue: 'id', selectedOptions: selectedCircleFilters">
            </select>
        </div>
        <div class="col-md">
            <select class="primary-filter" multiple size="3"
                    data-bind="options: availableCrossFilters, optionsText: 'name', optionsValue: 'id', selectedOptions: selectedCrossFilters">
            </select>
        </div>
    </div>

    <div class="row">
        <div class="col-md" data-bind="template: { name: 'mod-template', foreach: squareMods }"></div>
        <div class="col-md" data-bind="template: { name: 'mod-template', foreach: arrowMods }"></div>
        <div class="col-md" data-bind="template: { name: 'mod-template', foreach: diamondMods }"></div>
        <div class="col-md" data-bind="template: { name: 'mod-template', foreach: triangleMods }"></div>
        <div class="col-md" data-bind="template: { name: 'mod-template', foreach: circleMods }"></div>
        <div class="col-md" data-bind="template: { name: 'mod-template', foreach: crossMods }"></div>
    </div>
</div>

@section scripts {
    <script src="~/Controllers/Mods/Scripts/modplannerviewmodel.js"></script>
    <script type="text/html" id="mod-template">
        <div class="mod-container" data-bind="css: { 'selected-mod': IsChecked() }">
            <div class="mod-image statmod-summary">
                <div class="statmod-preview">
                    <span class="statmod-pips" data-bind="foreach: new Array(Pips())">
                        <span class="statmod-pip"></span>
                    </span>
                    <div class="statmod-inset"
                         data-toggle="tooltip"
                         data-container="body"
                         title="Belongs to a planned modset"
                         data-bind="css: { invisible: !IsInModSet() }">
                        *
                    </div>
                    <div class="statmod-check" data-bind="css: { invisible: !ShowCheckbox() }">
                        <input type="checkbox" data-bind="checked: IsChecked" />
                    </div>
                    <a class="statmod-char-portrait" data-bind="attr: { href: CharacterUrl }">
                        <div class="char-portrait char-portrait-dark-side char-portrait-xsmall"
                             data-toggle="tooltip" data-container="body"
                             data-bind="attr: { title: CharacterName }">
                            <div class="char-portrait-image">
                                <img class="char-portrait-img" data-bind="attr: { src: CharacterImg, alt: CharacterName }" />
                            </div>
                        </div>
                    </a>
                    <img class="statmod-img" data-bind="attr: { src: ModImg }" />
                </div>
            </div>
            <div class="mod-stats statmod-stats">
                <p class="primary-stat" data-bind="text: Primary"></p>
                <p class="secondary-stat" data-bind="text: Secondary1"></p>
                <p class="secondary-stat" data-bind="text: Secondary2"></p>
                <p class="secondary-stat" data-bind="text: Secondary3"></p>
                <p class="secondary-stat" data-bind="text: Secondary4"></p>
            </div>
        </div>
    </script>
    <script type="text/javascript">
        var saveModsetUrl = '@Url.Action("SaveModSet", "Mods")';
        var modPlannerViewModel = new ModPlannerViewModel(@Html.Raw(JsonConvert.SerializeObject(Model)));
        ko.applyBindings(modPlannerViewModel);




        @*var playerId = @Model.PlayerId;

        $(function() {
            loadAll();

            $("#set-filters input[type=checkbox]").change(loadAll);
            $("#includeModsetMods").change(loadAll);

            $('#Square-filter').change(loadSquares);
            $('#Arrow-filter').change(loadArrows);
            $('#Diamond-filter').change(loadDiamonds);
            $('#Triangle-filter').change(loadTriangles);
            $('#Circle-filter').change(loadCircles);
            $('#Cross-filter').change(loadCrosses);
        });

        function loadAll() {
            setTimeout(function() {
                    loadSquares();
                    loadArrows();
                    loadDiamonds();
                    loadTriangles();
                    loadCircles();
                    loadCrosses();
                },
                200);
        }

        function getFilters(modSlot) {
            //get set filter
            var sets = [];
            $("#set-filters .active").each(function() {
                var set = $(this).find(".set-filter").attr("id");
                sets.push(set);
            });

            //get sorts
            var sorts = [];
            $(".sort-option").each(function() {
                var sort = $(this).find("select").val();
                sorts.push(sort);
            });

            //get modset bool
            var include = $("#includeModsetMods").prop("checked");

            //get primary filter for modSlot
            var primary = $("#" + modSlot + "-filter").val();

            return {
                "playerId": playerId,
                "sets": sets,
                "modSlot": modSlot,
                "primary": primary,
                "sorts": sorts,
                "includeModsInSet": include
            };
        }

        function loadSquares() {
            $("#square-container").html("");
            $("#square-container").load("@Url.Action("UnplannedMods", "Mods")",
                getFilters("Square"),
                function() {

                });
        }

        function loadArrows() {
            $("#arrow-container").html("");
            $("#arrow-container").load("@Url.Action("UnplannedMods", "Mods")",
                getFilters("Arrow"),
                function() {

                });
        }

        function loadDiamonds() {
            $("#diamond-container").html("");
            $("#diamond-container").load("@Url.Action("UnplannedMods", "Mods")",
                getFilters("Diamond"),
                function() {

                });
        }

        function loadTriangles() {
            $("#triangle-container").html("");
            $("#triangle-container").load("@Url.Action("UnplannedMods", "Mods")",
                getFilters("Triangle"),
                function() {

                });
        }

        function loadCircles() {
            $("#circle-container").html("");
            $("#circle-container").load("@Url.Action("UnplannedMods", "Mods")",
                getFilters("Circle"),
                function() {

                });
        }

        function loadCrosses() {
            $("#cross-container").html("");
            $("#cross-container").load("@Url.Action("UnplannedMods", "Mods")",
                getFilters("Cross"),
                function() {

                });
        }

        function mods_OnChange(element) {
            if ($(element).closest(".mod-container").hasClass("selected-mod")) {
                $(element).closest(".mod-container").removeClass("selected-mod");
            } else {
                $(element).closest(".mod-container").addClass("selected-mod");
            }
        }

        function playerModSets_OnClick() {
            var showConfirm = false;
            var modIds = [];
            $(".selected-mod").each(function () {
                if ($(this).find(".statmod-inset").length)
                    showConfirm = true;
                modIds.push($(this).data("id"));
            });

            if (showConfirm) {
                var confirmation = confirm("Saving a mod that has already been planned will delete the modset it is a part of.  Continue?");
                if (confirmation === true)
                    saveModset(modIds);
            } else
                saveModset(modIds);
        }

        function saveModset(modIds) {
            $.post("@Url.Action("SaveModSet", "Mods")", { "playerId": playerId, "modIds": modIds }, function(result) {
                if (!result.Success)
                    toastr.error(result.Messages[0], "Error saving modset:");
                else {
                    toastr.success("Modset successfully saved.");
                    loadAll();
                }
            });
        }

        function addSort() {
            var currentSorts = $("#sort-container").children(".sort-option");
            var newElement = "<div class='sort-option'>";

            if (currentSorts.length > 0) {
                newElement += "Then By ";
            } else {
                newElement += "Sort By ";
            }

            newElement += "<select onchange='sortChanged()'>" +
                "<option value='0'>select an option</option>" +
                "<option value='3'>speed</option>" +
                "<option value='5'>critical chance</option>" +
                "<option value='9'>critical damage</option>" +
                "<option value='101'>flat offense</option>" +
                "<option value='201'>percentage offense</option>" +
                "<option value='8'>potency</option>" +
                "<option value='10'>accuracy</option>" +
                "<option value='107'>flat protection</option>" +
                "<option value='207'>percentage protection</option>" +
                "<option value='106'>flat health</option>" +
                "<option value='206'>percentage health</option>" +
                "<option value='102'>flat defense</option>" +
                "<option value='202'>percentage defense</option>" +
                "<option value='4'>tenacity</option>" +
                "<option value='11'>critical avoidance</option>" +
                "</select> " +
                "<a href='#' onclick='removeSort(this)'><span class='badge badge-danger'>X</span></a>" +
                "</div>";

            $("#sort-container").append(newElement);
        }

        function removeSort(element) {
            $(element).closest(".sort-option").remove();
            loadAll();
        }

        function sortChanged() {
            loadAll();
        }*@
    </script>
}