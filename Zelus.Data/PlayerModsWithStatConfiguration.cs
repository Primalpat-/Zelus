// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Zelus.Data
{

    // PlayerModsWithStats
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class PlayerModsWithStatConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PlayerModsWithStat>
    {
        public PlayerModsWithStatConfiguration()
            : this("dbo")
        {
        }

        public PlayerModsWithStatConfiguration(string schema)
        {
            ToTable("PlayerModsWithStats", schema);
            HasKey(x => new { x.Id, x.PlayerId, x.Pips, x.SlotId, x.SetId, x.PrimaryTypeId, x.IsInPlayerSet });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PlayerId).HasColumnName(@"PlayerId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PlayerCharacterId).HasColumnName(@"PlayerCharacterId").HasColumnType("int").IsOptional();
            Property(x => x.Pips).HasColumnName(@"Pips").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SlotId).HasColumnName(@"SlotId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SetId).HasColumnName(@"SetId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PrimaryTypeId).HasColumnName(@"PrimaryTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsInPlayerSet).HasColumnName(@"IsInPlayerSet").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Speed).HasColumnName(@"Speed").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.CritChance).HasColumnName(@"CritChance").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.CritDamage).HasColumnName(@"CritDamage").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.FlatOffense).HasColumnName(@"FlatOffense").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.PercentageOffense).HasColumnName(@"PercentageOffense").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.Potency).HasColumnName(@"Potency").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.Accuracy).HasColumnName(@"Accuracy").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.FlatProtection).HasColumnName(@"FlatProtection").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.PercentageProtection).HasColumnName(@"PercentageProtection").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.FlatHealth).HasColumnName(@"FlatHealth").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.PercentageHealth).HasColumnName(@"PercentageHealth").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.FlatDefense).HasColumnName(@"FlatDefense").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.PercentageDefense).HasColumnName(@"PercentageDefense").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.Tenacity).HasColumnName(@"Tenacity").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            Property(x => x.CritAvoidance).HasColumnName(@"CritAvoidance").HasColumnType("decimal").IsOptional().HasPrecision(10,2);
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
