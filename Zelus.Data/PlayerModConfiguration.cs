// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Zelus.Data
{

    // PlayerMods
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class PlayerModConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PlayerMod>
    {
        public PlayerModConfiguration()
            : this("dbo")
        {
        }

        public PlayerModConfiguration(string schema)
        {
            ToTable("PlayerMods", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PlayerId).HasColumnName(@"PlayerId").HasColumnType("int").IsRequired();
            Property(x => x.PlayerCharacterId).HasColumnName(@"PlayerCharacterId").HasColumnType("int").IsOptional();
            Property(x => x.Pips).HasColumnName(@"Pips").HasColumnType("int").IsRequired();
            Property(x => x.SlotId).HasColumnName(@"SlotId").HasColumnType("int").IsRequired();
            Property(x => x.SetId).HasColumnName(@"SetId").HasColumnType("int").IsRequired();
            Property(x => x.PrimaryTypeId).HasColumnName(@"PrimaryTypeId").HasColumnType("int").IsRequired();
            Property(x => x.PrimaryUnitsId).HasColumnName(@"PrimaryUnitsId").HasColumnType("int").IsRequired();
            Property(x => x.PrimaryValue).HasColumnName(@"PrimaryValue").HasColumnType("decimal").IsRequired().HasPrecision(6,2);
            Property(x => x.Secondary1TypeId).HasColumnName(@"Secondary1TypeId").HasColumnType("int").IsRequired();
            Property(x => x.Secondary1UnitsId).HasColumnName(@"Secondary1UnitsId").HasColumnType("int").IsRequired();
            Property(x => x.Secondary1Value).HasColumnName(@"Secondary1Value").HasColumnType("decimal").IsRequired().HasPrecision(6,2);
            Property(x => x.Secondary2TypeId).HasColumnName(@"Secondary2TypeId").HasColumnType("int").IsRequired();
            Property(x => x.Secondary2UnitsId).HasColumnName(@"Secondary2UnitsId").HasColumnType("int").IsRequired();
            Property(x => x.Secondary2Value).HasColumnName(@"Secondary2Value").HasColumnType("decimal").IsRequired().HasPrecision(6,2);
            Property(x => x.Secondary3TypeId).HasColumnName(@"Secondary3TypeId").HasColumnType("int").IsRequired();
            Property(x => x.Secondary3UnitsId).HasColumnName(@"Secondary3UnitsId").HasColumnType("int").IsRequired();
            Property(x => x.Secondary3Value).HasColumnName(@"Secondary3Value").HasColumnType("decimal").IsRequired().HasPrecision(6,2);
            Property(x => x.Secondary4TypeId).HasColumnName(@"Secondary4TypeId").HasColumnType("int").IsRequired();
            Property(x => x.Secondary4UnitsId).HasColumnName(@"Secondary4UnitsId").HasColumnType("int").IsRequired();
            Property(x => x.Secondary4Value).HasColumnName(@"Secondary4Value").HasColumnType("decimal").IsRequired().HasPrecision(6,2);

            // Foreign keys
            HasOptional(a => a.PlayerCharacter).WithMany(b => b.PlayerMods).HasForeignKey(c => c.PlayerCharacterId).WillCascadeOnDelete(false); // FK_PlayerMods_PlayerCharacters
            HasRequired(a => a.ModSet).WithMany(b => b.PlayerMods).HasForeignKey(c => c.SetId).WillCascadeOnDelete(false); // FK_PlayerMods_ModSets
            HasRequired(a => a.ModSlot).WithMany(b => b.PlayerMods).HasForeignKey(c => c.SlotId).WillCascadeOnDelete(false); // FK_PlayerMods_ModSlots
            HasRequired(a => a.Player).WithMany(b => b.PlayerMods).HasForeignKey(c => c.PlayerId).WillCascadeOnDelete(false); // FK_PlayerMods_Players
            HasRequired(a => a.PrimaryType).WithMany(b => b.PrimaryType).HasForeignKey(c => c.PrimaryTypeId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatTypes
            HasRequired(a => a.PrimaryUnits).WithMany(b => b.PrimaryUnits).HasForeignKey(c => c.PrimaryUnitsId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatUnits
            HasRequired(a => a.Secondary1Type).WithMany(b => b.Secondary1Type).HasForeignKey(c => c.Secondary1TypeId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatTypes1
            HasRequired(a => a.Secondary1Units).WithMany(b => b.Secondary1Units).HasForeignKey(c => c.Secondary1UnitsId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatUnits1
            HasRequired(a => a.Secondary2Type).WithMany(b => b.Secondary2Type).HasForeignKey(c => c.Secondary2TypeId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatTypes2
            HasRequired(a => a.Secondary2Units).WithMany(b => b.Secondary2Units).HasForeignKey(c => c.Secondary2UnitsId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatUnits2
            HasRequired(a => a.Secondary3Type).WithMany(b => b.Secondary3Type).HasForeignKey(c => c.Secondary3TypeId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatTypes3
            HasRequired(a => a.Secondary3Units).WithMany(b => b.Secondary3Units).HasForeignKey(c => c.Secondary3UnitsId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatUnits3
            HasRequired(a => a.Secondary4Type).WithMany(b => b.Secondary4Type).HasForeignKey(c => c.Secondary4TypeId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatTypes4
            HasRequired(a => a.Secondary4Units).WithMany(b => b.Secondary4Units).HasForeignKey(c => c.Secondary4UnitsId).WillCascadeOnDelete(false); // FK_PlayerMods_ModStatUnits4
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
