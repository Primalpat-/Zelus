// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Zelus.Data
{

    // CharacterSynergies
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class CharacterSynergyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharacterSynergy>
    {
        public CharacterSynergyConfiguration()
            : this("dbo")
        {
        }

        public CharacterSynergyConfiguration(string schema)
        {
            ToTable("CharacterSynergies", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PrimaryCharacterId).HasColumnName(@"PrimaryCharacterId").HasColumnType("int").IsRequired();
            Property(x => x.SynergyCharacterId).HasColumnName(@"SynergyCharacterId").HasColumnType("int").IsRequired();
            Property(x => x.SynergyTypeId).HasColumnName(@"SynergyTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5000);

            // Foreign keys
            HasRequired(a => a.PrimaryCharacter).WithMany(b => b.PrimaryCharacter).HasForeignKey(c => c.PrimaryCharacterId).WillCascadeOnDelete(false); // FK_CharacterSynergies_Units
            HasRequired(a => a.SynergyCharacter).WithMany(b => b.SynergyCharacter).HasForeignKey(c => c.SynergyCharacterId).WillCascadeOnDelete(false); // FK_CharacterSynergies_Units1
            HasRequired(a => a.SynergyType).WithMany(b => b.CharacterSynergies).HasForeignKey(c => c.SynergyTypeId).WillCascadeOnDelete(false); // FK_CharacterSynergies_SynergyTypes
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
