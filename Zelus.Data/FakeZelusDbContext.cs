// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Zelus.Data
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class FakeZelusDbContext : IZelusDbContext
    {
        public System.Data.Entity.DbSet<Alliance> Alliances { get; set; }
        public System.Data.Entity.DbSet<Guild> Guilds { get; set; }
        public System.Data.Entity.DbSet<ModSet> ModSets { get; set; }
        public System.Data.Entity.DbSet<ModSlot> ModSlots { get; set; }
        public System.Data.Entity.DbSet<ModStatType> ModStatTypes { get; set; }
        public System.Data.Entity.DbSet<ModStatUnit> ModStatUnits { get; set; }
        public System.Data.Entity.DbSet<Player> Players { get; set; }
        public System.Data.Entity.DbSet<PlayerCharacter> PlayerCharacters { get; set; }
        public System.Data.Entity.DbSet<PlayerMod> PlayerMods { get; set; }
        public System.Data.Entity.DbSet<PlayerShip> PlayerShips { get; set; }
        public System.Data.Entity.DbSet<Unit> Units { get; set; }

        public FakeZelusDbContext()
        {
            Alliances = new FakeDbSet<Alliance>("Id");
            Guilds = new FakeDbSet<Guild>("Id");
            ModSets = new FakeDbSet<ModSet>("Id");
            ModSlots = new FakeDbSet<ModSlot>("Id");
            ModStatTypes = new FakeDbSet<ModStatType>("Id");
            ModStatUnits = new FakeDbSet<ModStatUnit>("Id");
            Players = new FakeDbSet<Player>("Id");
            PlayerCharacters = new FakeDbSet<PlayerCharacter>("Id");
            PlayerMods = new FakeDbSet<PlayerMod>("Id");
            PlayerShips = new FakeDbSet<PlayerShip>("Id");
            Units = new FakeDbSet<Unit>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
